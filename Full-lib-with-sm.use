model Library

enum BookStatus { available, unavailable, onreserve}
enum CopyStatus { onShelf, onLoan, onReserve}

class Reservation
    attributes
        member : Member
        copy : Copy
    operations
        reserve(m : Member, c : Copy)
        begin
            if(m.no_reserved = 0) then
                self.member := m;
                self.copy := c;
                insert (c, self) into BeenReserved;
                insert (m, self) into HasReservation;
                self.member.reserve(self.copy, self);
            else
                WriteLine('You have already reserved a book');
            end
        end
        unreserve()
        begin
            delete (self.copy, self) from BeenReserved;
            delete (self.member, self) from HasReservation;
            self.member.unreserve(self.copy);
            self.member := null;
            self.copy := null;
        end
end

class Book
    attributes
        title : String
        author : String
        status : BookStatus init = #available
        no_copies : Integer init = 2
        no_onshelf : Integer init = 2
        ISBN : String
        genre : String
        date_of_publication : String
        
    operations
        borrow()
        begin
            self.no_onshelf := self.no_onshelf - 1;
            if (self.no_onshelf = 0) then 
                self.status := #unavailable 
            end
        end      
        
        return() begin
            self.no_onshelf := self.no_onshelf + 1;
            self.status := #available
        end 
        post: no_onshelf = no_onshelf@pre + 1

        reserve()
        begin
            self.status := #onreserve
        end

        unreserve()
        begin
            self.status := #available
        end


        
    
    statemachines
        psm States
        states                        
            newTitle : initial
            available       [no_onshelf > 0]
            unavailable     [no_onshelf = 0]
        transitions
            newTitle ->  available  { create }
            available -> unavailable { [no_onshelf = 1] borrow() }
            available -> available { [no_onshelf > 1] borrow() }
            available -> available { return() }
            unavailable -> available { return() }
        end
end


class Copy
  attributes
        status : CopyStatus init = #onShelf
        book : Book
        days_onloan : Integer init = 0

  operations
    return()
    begin
        self.status := #onShelf;
        self.book.return()
    end

    status()
    begin
        WriteLine(self.status.toString())
    end    

    borrow( m : Member)
    begin
        self.status := #onLoan;
        self.book.borrow()
    end

    reserve()
    begin
        self.status := #onReserve;
        WriteLine(self.status.toString());
        self.book.reserve()
    end

    unreserve()
    begin
        self.status := #onShelf;
        self.book.unreserve()
    end
    statemachines
        psm States
        states                        
            newCopy : initial
            onShelf
            onLoan
            onReserve
        transitions
            newCopy -> onShelf { create }
            onShelf -> onLoan { borrow() }
            onShelf -> onReserve { reserve() }
            onLoan -> onShelf { return() }
            onReserve -> onShelf { unreserve() }
        end
    
    
end    
    
class Member 
  attributes 
    name : String
    address : String
    no_onloan : Integer
    no_reserved : Integer;
    status : String
    fine : Integer init = 0
    reservation : Reservation
  operations
    okToBorrow() : Boolean 
    begin
      if (self.no_onloan < 2) then
        result := true
      else 
        result := false
      end
    end

    searchBook(title : String)
    begin
        for b in Book.allInstances() do
            if (b.title = title) then
                WriteLine(b.title);
            end
        end
    end


    reserve(c : Copy , r : Reservation)
    begin
        self.reservation := r;
        WriteLine(self.no_reserved.toString());
        self.no_reserved := self.no_reserved + 1;
        c.reserve();
    end

    unreserve(c : Copy)
    begin
        self.no_reserved := self.no_reserved - 1;
        c.unreserve();
    end


    Fine()
    begin
        self.fine := self.fine + 5;
        WriteLine('You are fined $5');
    end 



    borrow(c : Copy)
    begin
        declare ok : Boolean;
        ok := self.okToBorrow();
        WriteLine('Test');
        if (self.reservation.copy = c and self.reservation.member = self and ok) then
            WriteLine('Test2');
            self.reservation.unreserve();
            self.reservation:= null;
            insert (self, c) into HasBorrowed;
            self.no_onloan := self.no_onloan + 1;
            WriteLine(self.no_onloan.toString());
            c.borrow(self);
        
        else
            WriteLine('Test3');
            if(ok and c.status = #onShelf) then
                WriteLine('Test4');
                insert (self, c) into HasBorrowed;
                self.no_onloan := self.no_onloan + 1;
                WriteLine(self.no_onloan.toString());
                c.borrow(self);
            end;
        end;

    end           
    
    return(c : Copy)
    begin
        delete (self, c) from HasBorrowed;
        self.no_onloan := self.no_onloan - 1;
        WriteLine(self.no_onloan.toString());  
        if(c.days_onloan > 14) then
            self.Fine();
        end; 
        c.return()

    end
    
end    

association HasBorrowed between
    Member[0..1] role borrower
    Copy[*] role borrowed
end

association CopyOf between
    Copy[1..*] role copies
    Book[1] role book
end

association HasReservation between
    Member[1] role reserver
    Reservation[1] role reservation
end

association BeenReserved between
    Copy[1] role copy
    Reservation[1] role reservation
end
constraints

context Member::borrow(c:Copy) 
    pre limit: self.no_onloan < 2
    pre cond1: self.borrowed->excludes(c)
    post cond2: self.borrowed->includes(c)